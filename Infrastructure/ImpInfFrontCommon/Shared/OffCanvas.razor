@using ImpInfCommon.ApiServices;
@using ImpInfCommon.Interfaces;
@inject IJSRuntime JS

<div class="offcanvas offcanvas-end" tabindex="-1" id="offcanvasRight" aria-labelledby="offcanvasRightLabel">
    <div class="offcanvas-header">
        <h5 id="offcanvasRightLabel">Новости</h5>
        <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Закрыть"></button>
    </div>

    <div class="offcanvas-body">
        <div class="h-100">
            <CollectionView DataSource="News" RemainingItemsThresholdReachedCommand="@LoadMoreNews">
                <EmptyView>
                    <div class="d-flex justify-content-center w-100" style="height: 100vh;">
                        <div class="spinner-border align-self-center" style="color: var(--secondary-button-color) " role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                </EmptyView>
                <ItemTemplate Context="news">
                    <div class="text-black">@news.Message</div>
                </ItemTemplate>
                <ItemSeparator>
                    <div class="separator-horizontal"></div>
                </ItemSeparator>
                <LoadingIndicator>
                    <div class="d-flex justify-content-center w-100" style="height: 100vh;">
                        <div class="spinner-border align-self-center" style="color: var(--secondary-button-color) " role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                </LoadingIndicator>
            </CollectionView>
        </div>
    </div>

    <div class="d-flex flex-row p-1 align-items-center">
        <div id="test" class="input-text-canvas" contenteditable="true" @onkeydown="@HandleKeyDown" @bind="@Message"></div>
    </div>
</div>

@code{

    [Inject]
    public INewsService newsService { get; set; }

    private string Message { get; set; }
    private List<News> News { get; set; }

    private string PreviousCode = null;

    protected override async Task OnInitializedAsync()
    {
        News = await newsService.ReadIntervalSortedByDate(0, 50);
        await base.OnInitializedAsync();
    }

    private async Task SendNew()
    {
        await newsService.Post(new News { Message = Message });
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
    }
   
    private async Task LoadMoreNews(int startIndex)
    {
        News.AddRange(await newsService.ReadIntervalSortedByDate(startIndex, 50));
    }
}
