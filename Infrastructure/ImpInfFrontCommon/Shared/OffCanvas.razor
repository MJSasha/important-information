@using ImpInfCommon.ApiServices;
@using ImpInfCommon.Interfaces;
@inject IJSRuntime JS

<div class="offcanvas offcanvas-end" tabindex="-1" id="offcanvasRight" aria-labelledby="offcanvasRightLabel">
    <div class="offcanvas-header">
        <h5 id="offcanvasRightLabel">Новости</h5>
        <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Закрыть"></button>
    </div>

    <div class="offcanvas-body">
        <div class="d-flex flex-column-reverse">
            <Virtualize Context="item" ItemsProvider="@LoadNews">
                <ItemContent>
                    <p>
                        @item.Message
                    </p>
                </ItemContent>
                <Placeholder>
                    <p class="placeholder-glow">
                        <span class="placeholder w-100"></span>
                    </p>
                </Placeholder>
            </Virtualize>
        </div>
    </div>

    <div class="d-flex flex-row p-1 align-items-center">
        <div id="test" class="input-text-canvas" contenteditable="true" @onkeydown="@HandleKeyDown" @bind="@Message"></div>
    </div>
</div>

@code{

    [Inject]
    public INewsService newsService { get; set; }
    private string Message { get; set; }

    private async Task SendNew()
    {
        await newsService.Post(new News() { Message = Message });
    }

    private string PreviousCode = null;

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
    }
   
    private async ValueTask<ItemsProviderResult<News>> LoadNews(ItemsProviderRequest request)
    {
        var news = await newsService.Get();

        return new ItemsProviderResult<News>(news.Skip(request.StartIndex).Take(50), news.Count);
    }
}
