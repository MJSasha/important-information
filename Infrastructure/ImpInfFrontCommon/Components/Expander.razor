<div>
    <div data-toggle="collapse" data-target="#@(string.IsNullOrWhiteSpace(Id) ? "collapsePanel" : Id)" role="button" @onclick="() => { Expanded = !Expanded; OnToggled?.Invoke(Expanded); } " 
         class="@($"d-flex flex-row {SelectJustify()} align-items-center {CssClass}")" style="@CssStyle">
        @Header

        @if (!HideArrow)
        {
            <SvgImage Src="_content/ImpInfFrontCommon/image/follow.svg#icon" width="8px" height="16px" color="var(--link-color)" class="flex-shrink-0" style="@($"transform: rotate({(Expanded  ? 270 : 90)}deg);")"/>
        }
    </div>
    <div class="collapse @(expandedInitially ? "show" : null)" id="@(string.IsNullOrWhiteSpace(Id) ? "collapsePanel" : Id)">
        @Content
    </div>
</div>

@code {
    [Parameter]
    public ExpanderJustify Justify { get; set; } = ExpanderJustify.Between;

    [Parameter]
    public RenderFragment Header { get; set; }

    [Parameter]
    public RenderFragment Content { get; set; }

    [Parameter]
    public string Id { get; set; }

    public bool Expanded { get; private set; }

    [Parameter]
    public Action<bool> OnToggled { get; set; }

    [Parameter]
    public bool ExpandedInitially { get; set; }

    [Parameter]
    public bool HideArrow { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object> AdditionalAttributes { get; set; }

    protected string CssClass => AdditionalAttributes?.ContainsKey("class") == true ? (string)AdditionalAttributes["class"] : "";
    protected string CssStyle => AdditionalAttributes?.ContainsKey("style") == true ? (string)AdditionalAttributes["style"] : "";

    [Inject]
    private IJSRuntime jSRuntime { get; set; }

    private bool expandedInitially;

    public async Task Toggle()
    {
        Expanded = !Expanded;
        await jSRuntime.InvokeVoidAsync("expanderMethods.toggle", string.IsNullOrWhiteSpace(Id) ? "collapsePanel" : Id);
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        expandedInitially = Expanded = ExpandedInitially;
    }

    private string SelectJustify()
    {
        return Justify switch
        {
            ExpanderJustify.Between => "justify-content-between",
            ExpanderJustify.End => "justify-content-end",
            _ => ""
        };
    }
}
